<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game of life</title>
    <style>
        body{
            margin: 0px;
            padding: 0px;
        }

        canvas#gamecanvas{
            width: 100vw;
            height: 100vh;
        }
    </style>
</head>
<body>
    <canvas id="gamecanvas"></canvas>
    <script>
        class GameInput{
            constructor(canvas, left, top, right, bottom, hCells, vCells){

            }

            addPlayPauseListener(listener){
                // Function 'listener()' will be called on play/pause event.
                // Remove these comments once implemented.
            }

            addCellClickListener(listener){
                // Function 'listener(row, col)' will be called on cell click.
                // It will be passed the cell row as arg1 and column as arg2.
                // Remove these comments once implemented.
            }
        }

        class GameRenderer{
            ClearCanvas(clearColor = [0.0, 0.0, 0.0, 1.0]){
                this.gl.clearColor(clearColor[0],clearColor[1],clearColor[2],clearColor[3])
                this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT)
            }

            //Draw an array of clip space vertices as triangles to screen
            DrawVertArray(verts, color){
                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(verts), this.gl.DYNAMIC_DRAW);
                this.gl.uniform4fv(this.programInfo.uniformLocations.Color,color);
                this.gl.drawArrays(this.gl.TRIANGLES, 0, verts.length / 2);
            }

            constructor(canvas, left, top, right, bottom, hCells, vCells){
                this.hCells = hCells
                this.vCells = vCells
                const obj = this
                const width = canvas.width = right - left
                const height = canvas.height = bottom - top

                this.gl = canvas.getContext("webgl",{preserveDrawingBuffer: true})
                if (this.gl === null){
                    alert("Unable to initialize WebGL. Your browser or machine may not support it.")
                    return
                }

                this.Colors = {
                    background: [0.1,0.1,0.1,1],
                    grid: [0.3,0.3,0.3,1],
                    cell: [1,1,1,1]
                }

                const VertexShaderSource = `
                attribute vec4 aVertexPosition;
                void main(){
                    gl_Position = aVertexPosition;
                }
                `
                const FragmentShaderSource = `
                uniform mediump vec4 uColor;
                void main(){
                    gl_FragColor = uColor;
                }
                `

                // Creates a shader of the given type, uploads the source and
                // compiles it
                function createShader(type, source){
                    const shader = obj.gl.createShader(type)

                    // Send the source to the shader object
                    obj.gl.shaderSource(shader, source)

                    obj.gl.compileShader(shader)

                    // See if it compiled successfully
                    if (!obj.gl.getShaderParameter(shader, obj.gl.COMPILE_STATUS))
                    {
                        alert(`An error occurred compiling the shaders: ${obj.gl.getShaderInfoLog(shader)}`)
                        obj.gl.deleteShader(shader)
                        return null
                    }

                    return shader;
                }
                
                // Create a shader program, attach vertex and fragment shaders and link program
                function initShaderProgram(vsSource, fsSource){
                    const vertexShader = createShader(obj.gl.VERTEX_SHADER, vsSource)
                    const fragmentShader = createShader(obj.gl.FRAGMENT_SHADER, fsSource)

                    // Create the shader program
                    const shaderProgram = obj.gl.createProgram()
                    obj.gl.attachShader(shaderProgram, vertexShader)
                    obj.gl.attachShader(shaderProgram, fragmentShader)
                    obj.gl.linkProgram(shaderProgram)

                    // If linking the shader program failed, alert
                    if (!obj.gl.getProgramParameter(shaderProgram, obj.gl.LINK_STATUS))
                    {
                        alert(`Unable to initialize the shader program: ${obj.gl.getProgramInfoLog(shaderProgram)}`)
                        return null
                    }

                    return shaderProgram
                }

                const shaderProgram = initShaderProgram(VertexShaderSource, FragmentShaderSource)

                // Info needed to use the shader program
                this.programInfo = {
                program: shaderProgram,
                attribLocations: {
                vertexPosition: this.gl.getAttribLocation(shaderProgram, "aVertexPosition"),
                },
                uniformLocations: {
                Color: this.gl.getUniformLocation(shaderProgram, "uColor"),
                },
                }

                // Create a buffer for vertex positions
                function initPositionBuffer(){
                    const positionBuffer = obj.gl.createBuffer()

                    // Select the positionBuffer as the one to apply buffer
                    // operations to from here out
                    obj.gl.bindBuffer(obj.gl.ARRAY_BUFFER, positionBuffer)

                    // Create an array of positions for a test shape.
                    const positions = [0.5, 0.0, 0.0, 0.5, 0.0, -0.5]

                    // Pass the list of positions into WebGL to build the
                    // shape by creating a Float32Array from the
                    // JavaScript array, then use it to fill the current buffer
                    obj.gl.bufferData(obj.gl.ARRAY_BUFFER, new Float32Array(positions), obj.gl.DYNAMIC_DRAW)

                    return positionBuffer
                }

                //Create required buffers
                function initBuffers(){
                    const positionBuffer = initPositionBuffer()

                    return {
                    position: positionBuffer,
                    }
                }

                // Tell WebGL how to pull out the positions from the position
                // buffer into the vertexPosition attribute
                function setPositionAttribute(buffers, programInfo){
                    const numComponents = 2 // Pull out 2 values per iteration
                    const type = obj.gl.FLOAT // The data in the buffer are 32bit floats
                    const normalize = false // Don't normalize
                    const stride = 0 // Number of bytes to get from one set of values to the next
                                      // 0 = use type and numComponents above
                    const offset = 0 // Number of bytes inside the buffer to start from
                    obj.gl.bindBuffer(obj.gl.ARRAY_BUFFER, buffers.position)
                    obj.gl.vertexAttribPointer(
                    programInfo.attribLocations.vertexPosition,
                    numComponents,
                    type,
                    normalize,
                    stride,
                    offset,
                    )
                    obj.gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition)
                }

                function initDraw(programInfo, buffers){   
                    obj.gl.clearDepth(1.0) // Clear everything
                    obj.gl.enable(obj.gl.DEPTH_TEST) // Enable depth testing
                    obj.gl.depthFunc(obj.gl.LEQUAL) // Near things obscure far things
                    obj.ClearCanvas(obj.Colors.background)

                    // Set up vertex attribute array
                    setPositionAttribute(buffers, programInfo)

                    // Tell WebGL to use our program when drawing
                    obj.gl.useProgram(programInfo.program)

                    obj.gl.uniform4fv(programInfo.uniformLocations.Color,[1.0,1.0,1.0,1.0])
                }

                const buffers = initBuffers();
                initDraw(this.programInfo, buffers);

                let smallerLen = (width > height) ? height : width
                this.WorldToClipSpace = [smallerLen * 2 / width, smallerLen * 2 / height]
                this.WorldSize = [width / smallerLen, height / smallerLen]
                this.PixelSize = 1 / smallerLen
            }

            draw(buffer){
                //Clip coordinates go from (-1,1)(top left) to (1,-1)(bottom right)
                const cellHalfSize = [1 / this.hCells, 1 / this.vCells]

                const baseVerts = [-cellHalfSize[0],cellHalfSize[1],cellHalfSize[0],
                cellHalfSize[1],cellHalfSize[0],-cellHalfSize[1],
                cellHalfSize[0],-cellHalfSize[1],-cellHalfSize[0],
                -cellHalfSize[1],-cellHalfSize[0],cellHalfSize[1]]

                for(var row=0; row < this.vCells; row++){
                    for(var col=0; col < this.hCells; col++){
                        let offset = [-1 + (col * 2 + 1) * cellHalfSize[0], 1 - (row * 2 + 1) * cellHalfSize[1]]
                        let verts = [baseVerts[0] + offset[0],baseVerts[1] + offset[1],baseVerts[2] + offset[0],
                        baseVerts[3] + offset[1],baseVerts[4] + offset[0],baseVerts[5] + offset[1],
                        baseVerts[6] + offset[0],baseVerts[7] + offset[1],baseVerts[8] + offset[0],
                        baseVerts[9] + offset[1],baseVerts[10] + offset[0],baseVerts[11] + offset[1]]

                        if (buffer[row][col] > 0){
                            this.DrawVertArray(verts, this.Colors.cell)
                        }
                        else{
                            this.DrawVertArray(verts, this.Colors.background)
                        }
                    }
                }
            }
        }

        function makeGameRendererFor(canvas, width, height, cellSize){
            function cellsInLength(length, cellSize){
                return Math.floor(length / cellSize)
            }

            function clampToSize(number, size){
                return number - ( number % size)
            }

            const windowWidth = clampToSize(width, cellSize)
            const windowHeight = clampToSize(height, cellSize)
            const hMargin = width - windowWidth
            const vMargin = height - windowHeight

            const left = Math.floor(hMargin / 2)
            const top = Math.floor(vMargin / 2)
            const right = left + windowWidth
            const bottom = top + windowHeight

            const hCells = cellsInLength(windowWidth, cellSize)
            const vCells = cellsInLength(windowHeight, cellSize)

            return {
                renderer: new GameRenderer(
                    canvas, left, top, right, bottom, hCells, vCells
                ),
                
                hCells: hCells, vCells: vCells
            }
        }

        class GameOfLife{
            #hCells
            #vCells
            #grid

            getGrid(){
                return this.#grid
            }

            #setGrid(grid){
                this.#grid = grid
            }

            #clearGrid(){
                const clearGrid = []

                for(var row=0; row < this.#vCells; row++){
                    const rowArray = []

                    for(var col=0; col < this.#hCells; col++){
                        const cellValue = (row + col) % 2
                        rowArray.push(cellValue)
                    }

                    clearGrid.push(rowArray)
                }

                this.#setGrid(clearGrid)
            }

            #seedGrid(){
                const grid = this.getGrid()
                for(var row=0; row < this.#vCells; row++){
                    for(var col=0; col < this.#hCells; col++){
                        grid[row][col] = Math.round(Math.random())
                    }
                }
            }
            
            constructor(hCells, vCells){
                this.#hCells = hCells
                this.#vCells = vCells
                this.#clearGrid(vCells, hCells)
                this.#seedGrid()
            }

            #calculateNextCellState(row, col){
                const grid = this.getGrid()

                let topIndex = row - 1
                let bottomIndex = row + 1

                if(topIndex < 0){
                    topIndex = topIndex + this.#vCells
                }

                else if(bottomIndex >= this.#vCells){
                    bottomIndex = bottomIndex - this.#vCells
                }

                let leftIndex = col - 1
                let rightIndex = col + 1

                if(leftIndex < 0){
                    leftIndex = leftIndex + this.#hCells
                }

                else if(rightIndex >= this.#hCells){
                    rightIndex = rightIndex - this.#hCells
                }

                let aliveNeighbors = 0

                aliveNeighbors += grid[topIndex][leftIndex]
                aliveNeighbors += grid[topIndex][col]
                aliveNeighbors += grid[topIndex][rightIndex]
                aliveNeighbors += grid[row][leftIndex]
                aliveNeighbors += grid[row][rightIndex]
                aliveNeighbors += grid[bottomIndex][leftIndex]
                aliveNeighbors += grid[bottomIndex][col]
                aliveNeighbors += grid[bottomIndex][rightIndex]

                let cellState = grid[row][col]
                
                if(cellState === 1){
                    if(aliveNeighbors < 2 || aliveNeighbors > 3){
                        cellState = 0
                    }
                }

                else if(aliveNeighbors === 3){
                    cellState = 1
                }
                
                return cellState
            }

            calculateNextGrid(){
                const newGrid = []

                for(var row=0; row < this.#vCells; row++){
                    const rowArray = []

                    for(var col=0; col < this.#hCells; col++){
                        const cellValue = this.#calculateNextCellState(
                            row, col
                        )

                        rowArray.push(cellValue)
                    }

                    newGrid.push(rowArray)
                }

                this.#setGrid(newGrid)
            }
        }

        function startGame(){
            const gameCanvas = document.getElementById("gamecanvas")

            const { renderer, hCells, vCells } = makeGameRendererFor(
                gameCanvas, window.innerWidth, window.innerHeight, 16
            )

            const game = new GameOfLife(hCells, vCells)
            renderer.draw(game.getGrid())

            const frameDuration = 1000 / 60
            
            setInterval(
                function (){
                    requestAnimationFrame(function (){
                        game.calculateNextGrid()
                        renderer.draw(game.getGrid())
                    })
                },
                
                frameDuration
            )
        }

        startGame()
    </script>
</body>
</html>